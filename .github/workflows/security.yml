name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

      - name: Run pip-audit
        run: |
          pip install pip-audit
          pip-audit --format=json --output=pip-audit-report.json || true

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-vulnerability-reports
          path: |
            safety-report.json
            pip-audit-report.json

  # Code security scanning
  code-security:
    name: Code Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] semgrep

      - name: Run Bandit security scan
        run: |
          bandit -r src/ops0/ \
            -f json \
            -o bandit-report.json \
            --configfile pyproject.toml || true

      - name: Run Semgrep security scan
        run: |
          semgrep --config=auto \
            --json \
            --output=semgrep-report.json \
            src/ops0/ || true

      - name: Upload security scan reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-security-reports
          path: |
            bandit-report.json
            semgrep-report.json

  # Container security scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'security')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ops0 image for scanning
        run: |
          docker build -t ops0:scan -f Dockerfile .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ops0:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        run: |
          # Install Grype
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Scan the container
          grype ops0:scan -o json > grype-report.json || true

      - name: Upload container security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-security-reports
          path: |
            trivy-results.sarif
            grype-report.json

  # Secrets scanning
  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks secrets scan
        run: |
          # Install GitLeaks
          wget https://github.com/zricethezav/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          chmod +x gitleaks
          
          # Scan for secrets
          ./gitleaks detect --report-format json --report-path gitleaks-report.json --verbose || true

      - name: Upload secrets scan reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secrets-scan-reports
          path: gitleaks-report.json

  # CodeQL analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # License compliance checking
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pip-licenses licensecheck

      - name: Check Python package licenses
        run: |
          pip-licenses --format=json --output-file=python-licenses.json
          licensecheck --format json > licensecheck-report.json || true

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            python-licenses.json
            licensecheck-report.json

  # SBOM (Software Bill of Materials) generation
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Generate SBOM with pip-audit
        run: |
          pip install pip-audit
          pip-audit --format=cyclonedx-json --output=ops0-sbom.json

      - name: Generate SBOM with syft
        run: |
          # Install syft
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Generate SBOM for the entire project
          syft . -o spdx-json=ops0-sbom-syft.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: |
            ops0-sbom.json
            ops0-sbom-syft.json

  # Security policy compliance
  compliance-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check security policy files
        run: |
          # Check for required security files
          files_to_check=(
            ".github/SECURITY.md"
            "CONTRIBUTING.md"
            "LICENSE"
          )
          
          missing_files=()
          for file in "${files_to_check[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            fi
          done
          
          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "Missing security policy files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          fi
          
          echo "All required security policy files are present"

      - name: Check for hardcoded secrets patterns
        run: |
          # Check for common secret patterns
          if grep -r -i "api_key\s*=\s*['\"][^'\"]*['\"]" src/ --include="*.py"; then
            echo "Found potential hardcoded API keys"
            exit 1
          fi
          
          if grep -r -i "password\s*=\s*['\"][^'\"]*['\"]" src/ --include="*.py"; then
            echo "Found potential hardcoded passwords"
            exit 1
          fi
          
          echo "No obvious hardcoded secrets found"

  # Security report aggregation
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security, secrets-scan, license-check, sbom]
    if: always()
    steps:
      - name: Download all security reports
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: Aggregate security reports
        run: |
          echo "# ops0 Security Report" > security-summary.md
          echo "Generated on: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          # Process each type of report
          if [[ -f security-reports/dependency-vulnerability-reports/safety-report.json ]]; then
            echo "## Dependency Vulnerabilities" >> security-summary.md
            python scripts/process_safety_report.py security-reports/dependency-vulnerability-reports/safety-report.json >> security-summary.md
          fi
          
          if [[ -f security-reports/code-security-reports/bandit-report.json ]]; then
            echo "## Code Security Issues" >> security-summary.md
            python scripts/process_bandit_report.py security-reports/code-security-reports/bandit-report.json >> security-summary.md
          fi
          
          echo "Security report generated successfully"

      - name: Upload aggregated security report
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment security summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🔒 Security Scan Results\n\n${summary}`
              });
            } catch (error) {
              console.log('Could not read security summary');
            }

  # Security notification
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security, container-security, secrets-scan, codeql]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify security team
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Security Scan Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `Security scans have failed for the main branch. Please review the workflow results and address any security issues.\n\nWorkflow: ${context.workflow}\nRun: ${context.runNumber}\nCommit: ${context.sha}`,
              labels: ['security', 'critical', 'automated']
            });

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🚨 Security scan failed for ops0 main branch. Check GitHub Actions for details."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}