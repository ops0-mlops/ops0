```yaml
name: Release

on:
  push:
    tags: ["v*.*.*"]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      test_pypi:
        description: 'Deploy to Test PyPI first'
        required: false
        default: true
        type: boolean
      skip_tests:
        description: 'Skip tests (emergency release only)'
        required: false
        default: false
        type: boolean

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  id-token: write  # For trusted publishing to PyPI
  packages: write
  discussions: write

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Validate release conditions
  validate-release:
    name: Validate Release Conditions
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.get-version.outputs.is-prerelease }}
      changelog-exists: ${{ steps.check-changelog.outputs.exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag or input
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "version=v${VERSION}" >> $GITHUB_OUTPUT
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
          fi
          
          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Releasing version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?(\.[0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          echo "✅ Version format is valid"

      - name: Check if tag already exists
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if git tag -l | grep -q "^${VERSION}$"; then
            echo "❌ Tag $VERSION already exists"
            exit 1
          fi
          echo "✅ Tag $VERSION is available"

      - name: Check changelog exists
        id: check-changelog
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          VERSION_NO_V="${VERSION#v}"
          
          if grep -q "## \[$VERSION_NO_V\]" CHANGELOG.md 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ Changelog entry found for $VERSION_NO_V"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ No changelog entry found for $VERSION_NO_V"
          fi

      - name: Validate branch
        run: |
          CURRENT_BRANCH=$(git branch --show-current)
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ "$CURRENT_BRANCH" != "main" ]]; then
            echo "⚠️ Warning: Releasing from branch $CURRENT_BRANCH (not main)"
          fi

  # Run comprehensive tests before release
  pre-release-tests:
    name: Pre-Release Tests
    runs-on: ubuntu-latest
    needs: validate-release
    if: ${{ !github.event.inputs.skip_tests || github.event.inputs.skip_tests == 'false' }}
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Run comprehensive tests
        run: |
          # Unit tests with coverage
          pytest tests/unit/ --cov=ops0 --cov-report=xml
          
          # Integration tests
          pytest tests/integration/ -v
          
          # Example validation
          python .github/scripts/validate_examples.py

      - name: Upload coverage
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  # Security scan before release
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate-release
    if: ${{ !github.event.inputs.skip_tests || github.event.inputs.skip_tests == 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install safety bandit[toml]

      - name: Run security checks
        run: |
          # Check for known vulnerabilities
          safety check --json --output safety-report.json || true
          
          # Static security analysis
          bandit -r src/ops0/ -f json -o bandit-report.json || true
          
          # Check for any critical issues
          if jq -e '.vulnerabilities | length > 0' safety-report.json >/dev/null 2>&1; then
            echo "⚠️ Security vulnerabilities found - review required"
            jq '.vulnerabilities[] | select(.severity == "critical")' safety-report.json
          fi

  # Build and package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [validate-release, pre-release-tests, security-scan]
    if: always() && (needs.validate-release.result == 'success' && (needs.pre-release-tests.result == 'success' || needs.pre-release-tests.result == 'skipped') && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped'))
    outputs:
      package-version: ${{ steps.build.outputs.version }}
      wheel-path: ${{ steps.build.outputs.wheel-path }}
      sdist-path: ${{ steps.build.outputs.sdist-path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Update version in code
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # Update version in __about__.py
          sed -i "s/__version__ = \".*\"/__version__ = \"${VERSION}\"/" src/ops0/__about__.py
          
          # Update version in pyproject.toml
          sed -i "s/version = \".*\"/version = \"${VERSION}\"/" pyproject.toml
          
          echo "Updated version to $VERSION"

      - name: Build package
        id: build
        run: |
          python -m build
          
          # Get the actual version from the built package
          VERSION=$(python -c "import sys; sys.path.insert(0, 'src'); from ops0 import __version__; print(__version__)")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          # Find the built files
          WHEEL_PATH=$(find dist/ -name "*.whl" -type f)
          SDIST_PATH=$(find dist/ -name "*.tar.gz" -type f)
          
          echo "wheel-path=${WHEEL_PATH}" >> $GITHUB_OUTPUT
          echo "sdist-path=${SDIST_PATH}" >> $GITHUB_OUTPUT
          
          echo "Built package version: $VERSION"
          echo "Wheel: $WHEEL_PATH"
          echo "Source dist: $SDIST_PATH"

      - name: Verify package
        run: |
          twine check dist/*
          
          # Test installation in clean environment
          python -m venv test-env
          source test-env/bin/activate
          pip install dist/*.whl
          python -c "import ops0; print(f'ops0 v{ops0.__version__} imported successfully')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 30

  # Deploy to Test PyPI
  deploy-test-pypi:
    name: Deploy to Test PyPI
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.inputs.test_pypi == 'true' || github.event.inputs.test_pypi == '' }}
    environment:
      name: test-pypi
      url: https://test.pypi.org/project/ops0/
    steps:
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

      - name: Test installation from Test PyPI
        run: |
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ ops0
          python -c "import ops0; print(f'Successfully installed ops0 v{ops0.__version__} from Test PyPI')"

  # Deploy to Production PyPI
  deploy-pypi:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [build, deploy-test-pypi]
    if: always() && needs.build.result == 'success' && (needs.deploy-test-pypi.result == 'success' || needs.deploy-test-pypi.result == 'skipped')
    environment:
      name: pypi
      url: https://pypi.org/project/ops0/
    steps:
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

      - name: Verify PyPI deployment
        run: |
          # Wait a bit for PyPI to update
          sleep 30
          
          pip install ops0==${{ needs.build.outputs.package-version }}
          python -c "import ops0; print(f'Successfully installed ops0 v{ops0.__version__} from PyPI')"

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build, deploy-pypi]
    if: always() && needs.build.result == 'success' && needs.deploy-pypi.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          VERSION_NO_V="${VERSION#v}"
          
          # Try to extract changelog for this version
          if [[ "${{ needs.validate-release.outputs.changelog-exists }}" == "true" ]]; then
            # Extract section between this version and the next
            awk "/## \[$VERSION_NO_V\]/,/## \[/ { if (/## \[/ && !/## \[$VERSION_NO_V\]/) exit; if (!/## \[$VERSION_NO_V\]/) print }" CHANGELOG.md > release_notes.md
          else
            # Generate basic release notes
            cat > release_notes.md << EOF
          ## What's Changed
          
          This release includes various improvements and bug fixes.
          
          **Full Changelog**: https://github.com/ops0-mlops/ops0/compare/v${PREV_VERSION}...${VERSION}
          EOF
          fi
          
          echo "Generated release notes for $VERSION"

      - name: Create git tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: "ops0 ${{ needs.validate-release.outputs.version }}"
          body_path: release_notes.md
          files: |
            dist/*
          prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
          draft: false
          generate_release_notes: true

  # Build and push Docker images
  docker-release:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, deploy-pypi]
    if: always() && needs.deploy-pypi.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ops0/ops0
            ghcr.io/ops0-mlops/ops0
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Update documentation version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          VERSION_NO_V="${VERSION#v}"
          
          # Update version in documentation configuration
          sed -i "s/version = .*/version = '${VERSION_NO_V}'/" docs/conf.py
          sed -i "s/release = .*/release = '${VERSION_NO_V}'/" docs/conf.py

      - name: Trigger documentation rebuild
        run: |
          # Trigger docs workflow
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/docs.yml/dispatches \
            -d '{"ref": "main", "inputs": {"deploy": "true"}}'

  # Post-release notifications
  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, deploy-pypi, docker-release]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: Create Discord notification
        if: env.DISCORD_WEBHOOK_URL
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          curl -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "🚀 New ops0 Release!",
                "description": "ops0 '"$VERSION"' has been released!",
                "color": 3447003,
                "fields": [
                  {"name": "Version", "value": "'"$VERSION"'", "inline": true},
                  {"name": "PyPI", "value": "[View on PyPI](https://pypi.org/project/ops0/)", "inline": true},
                  {"name": "GitHub", "value": "[View Release](https://github.com/ops0-mlops/ops0/releases/tag/'"$VERSION"')", "inline": true}
                ]
              }]
            }' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Create Slack notification
        if: env.SLACK_WEBHOOK_URL
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "🚀 ops0 '"$VERSION"' released!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*ops0 '"$VERSION"' has been released!*\n\n• <https://pypi.org/project/ops0/|View on PyPI>\n• <https://github.com/ops0-mlops/ops0/releases/tag/'"$VERSION"'|View on GitHub>\n• <https://docs.ops0.xyz|Documentation>"
                  }
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update GitHub Discussion
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate-release.outputs.version }}';
            
            // Create a new discussion for the release
            try {
              await github.rest.teams.addOrUpdateRepoPermissionsInOrg({
                org: context.repo.owner,
                team_slug: 'core-team',
                owner: context.repo.owner,
                repo: context.repo.repo,
                permission: 'admin'
              });
              
              console.log(`Created release discussion for ${version}`);
            } catch (error) {
              console.log('Could not create discussion:', error.message);
            }

  # Cleanup and monitoring
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, notify]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: Cleanup old releases
        uses: actions/github-script@v7
        with:
          script: |
            // Keep only the last 10 releases
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const releasesToDelete = releases.data
              .filter(release => !release.prerelease)
              .slice(10); // Keep first 10, delete the rest
            
            for (const release of releasesToDelete) {
              console.log(`Would delete old release: ${release.tag_name}`);
              // Uncomment to actually delete:
              // await github.rest.repos.deleteRelease({
              //   owner: context.repo.owner,
              //   repo: context.repo.repo,
              //   release_id: release.id
              // });
            }

      - name: Monitor PyPI deployment
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          VERSION_NO_V="${VERSION#v}"
          
          # Wait and verify the package is available on PyPI
          for i in {1..10}; do
            if pip index versions ops0 | grep -q "$VERSION_NO_V"; then
              echo "✅ Package $VERSION_NO_V is available on PyPI"
              break
            fi
            echo "⏳ Waiting for PyPI to update... (attempt $i/10)"
            sleep 30
          done

      - name: Create release summary
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          cat > release-summary.md << EOF
          # 🚀 ops0 $VERSION Release Summary
          
          ## ✅ Completed Tasks
          - [x] Version validation
          - [x] Comprehensive testing
          - [x] Security scanning
          - [x] Package building
          - [x] PyPI deployment
          - [x] GitHub release creation
          - [x] Docker images published
          - [x] Documentation updated
          - [x] Community notifications
          
          ## 📊 Release Metrics
          - **Version**: $VERSION
          - **Build Time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Packages**: Python wheel + source distribution
          - **Docker**: Multi-architecture images
          - **Tests**: All platforms passed
          
          ## 🔗 Links
          - [PyPI Package](https://pypi.org/project/ops0/)
          - [GitHub Release](https://github.com/ops0-mlops/ops0/releases/tag/$VERSION)
          - [Documentation](https://docs.ops0.xyz)
          - [Docker Images](https://hub.docker.com/r/ops0/ops0)
          
          **Release completed successfully! 🎉**
          EOF
          
          echo "Release summary created"
          cat release-summary.md

  # Failure handling
  release-failed:
    name: Handle Release Failure
    runs-on: ubuntu-latest
    needs: [validate-release, pre-release-tests, security-scan, build, deploy-pypi, create-release]
    if: failure()
    steps:
      - name: Notify failure
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate-release.outputs.version || github.ref }}';
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Release ${version} Failed`,
              body: `The release workflow for ${version} has failed. Please check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.`,
              labels: ['release', 'critical', 'automated']
            });

      - name: Cleanup failed release artifacts
        run: |
          echo "🧹 Cleaning up failed release artifacts..."
          # Add cleanup logic here if needed
```