
# CodeQL Configuration for ops0
# This file customizes the CodeQL analysis for better security scanning
# Learn more: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/customizing-code-scanning

name: "ops0 CodeQL Config"

# Disable the default compiled language autobuilder
disable-default-rules: false

# Query selection and configuration
queries:
  - name: security-extended
    uses: security-extended
  - name: security-and-quality
    uses: security-and-quality

# Custom query suites for ops0-specific patterns
query-filters:
  - exclude:
      id:
        - py/clear-text-logging-sensitive-data  # We handle this in our logging framework
        - py/hardcoded-credentials             # We scan for this separately with other tools
  - include:
      kind:
        - problem
        - path-problem
      severity:
        - error
        - warning

# Paths to analyze
paths:
  - "src/ops0/**"
  - "scripts/**"

# Paths to ignore during analysis
paths-ignore:
  - "tests/**"           # Test files often have intentional vulnerabilities
  - "docs/**"            # Documentation doesn't need security scanning
  - "examples/**"        # Examples might have simplified security for clarity
  - "**/migrations/**"   # Database migrations
  - "**/node_modules/**" # Node.js dependencies
  - "**/*.md"           # Markdown files
  - "**/*.txt"          # Text files
  - "**/*.json"         # JSON configuration files
  - "**/*.yml"          # YAML configuration files
  - "**/*.yaml"         # YAML configuration files

# ML and Data Science specific configuration
ml-security:
  # Enable checks for common ML security issues
  enable-ml-checks: true

  # Check for unsafe pickle loading
  unsafe-deserialization: true

  # Check for model injection vulnerabilities
  model-injection: true

  # Check for data poisoning patterns
  data-validation: true

# ops0-specific security patterns
ops0-patterns:
  # Container security patterns
  container-security:
    - pattern: "docker.from_env()"
      message: "Ensure Docker socket access is properly secured"
    - pattern: "subprocess.run"
      message: "Review subprocess calls for command injection"

  # Cloud deployment security
  cloud-security:
    - pattern: "boto3.client"
      message: "Ensure AWS credentials are properly managed"
    - pattern: "google.cloud"
      message: "Ensure GCP service account keys are secure"

  # Pipeline security
  pipeline-security:
    - pattern: "@ops0.step"
      message: "Review step functions for input validation"
    - pattern: "ops0.storage"
      message: "Ensure storage operations use proper access controls"

# Performance tuning for large repositories
performance:
  # Timeout for individual queries (in seconds)
  timeout: 1200

  # Memory limit for analysis
  memory: "4G"

  # Number of threads to use
  threads: 0  # 0 means use all available cores

# Advanced configuration
advanced:
  # Enable experimental features
  experimental: false

  # Additional security frameworks to include
  frameworks:
    - flask
    - fastapi
    - requests
    - docker
    - kubernetes

  # Custom security rules for Python ML frameworks
  python-ml-rules:
    - name: "unsafe-pickle-load"
      description: "Detect unsafe pickle.load() calls"
      pattern: |
        import pickle
        pickle.load(...)
      severity: "high"

    - name: "model-deserialization"
      description: "Check model loading security"
      pattern: |
        torch.load(...)
        joblib.load(...)
        tensorflow.keras.models.load_model(...)
      severity: "medium"

    - name: "user-input-to-eval"
      description: "Prevent eval() with user input"
      pattern: |
        eval(user_input)
        exec(user_input)
      severity: "critical"

# Reporting configuration
reporting:
  # Categories to include in reports
  include-categories:
    - "security"
    - "maintainability"
    - "reliability"

  # Minimum severity to report
  min-severity: "note"

  # Custom output format
  format: "sarif"

  # Include source code snippets in reports
  include-snippets: true

# Integration with other security tools
integrations:
  # Bandit integration for Python security
  bandit:
    enabled: true
    config-file: "pyproject.toml"

  # Semgrep integration
  semgrep:
    enabled: true
    rules: "auto"

  # Safety integration for dependency scanning
  safety:
    enabled: true
    ignore-ids: []  # List of vulnerability IDs to ignore

# Custom filters for ops0-specific false positives
false-positive-filters:
  - rule-id: "py/unused-import"
    paths: ["src/ops0/__init__.py"]  # __init__.py files often have unused imports for API exposure

  - rule-id: "py/duplicate-key-dict-literal"
    paths: ["**/config/**"]  # Configuration files might have intentional duplicates

  - rule-id: "py/clear-text-storage-of-sensitive-information"
    paths: ["tests/**"]  # Test files often contain example sensitive data

# Notification configuration
notifications:
  # Notify on new security issues
  on-new-issues: true

  # Notify on resolved issues
  on-resolved: false

  # Channels for notifications
  channels:
    - github-security-advisories
    - pull-request-comments

# Exclusions for third-party code
third-party-exclusions:
  - path: "**/vendor/**"
    reason: "Third-party vendored code"
  - path: "**/generated/**"
    reason: "Auto-generated code"
  - path: "**/*.pb.py"
    reason: "Protocol buffer generated files"

# Database and ORM specific rules
database-security:
  # SQL injection patterns
  sql-injection:
    enabled: true
    frameworks: ["sqlalchemy", "django", "psycopg2"]

  # NoSQL injection patterns
  nosql-injection:
    enabled: true
    frameworks: ["pymongo", "redis"]

# API security patterns
api-security:
  # Check for missing authentication
  authentication:
    enabled: true
    patterns:
      - "@app.route"
      - "@api.route"
      - "fastapi"

  # Check for missing input validation
  input-validation:
    enabled: true
    patterns:
      - "request.json"
      - "request.form"
      - "request.args"

# Container and deployment security
deployment-security:
  # Dockerfile security checks
  dockerfile:
    enabled: true
    rules:
      - "no-root-user"
      - "specific-versions"
      - "minimal-base-image"

  # Kubernetes security checks
  kubernetes:
    enabled: true
    rules:
      - "no-privileged-containers"
      - "resource-limits"
      - "security-context"

# Compliance frameworks
compliance:
  # Enable OWASP Top 10 checks
  owasp-top10: true

  # Enable CWE (Common Weakness Enumeration) mapping
  cwe-mapping: true

  # Enable SANS Top 25 checks
  sans-top25: true

# Machine Learning specific security checks
ml-security-extended:
  # Model security
  model-security:
    - "model-poisoning-detection"
    - "adversarial-input-validation"
    - "model-extraction-protection"

  # Data security
  data-security:
    - "pii-detection"
    - "data-leakage-prevention"
    - "feature-extraction-safety"

  # Pipeline security
  pipeline-security:
    - "step-isolation"
    - "data-flow-validation"
    - "execution-sandboxing"
