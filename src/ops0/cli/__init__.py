"""Initialize command for ops0 - create new ops0 projects."""

import os
from pathlib import Path
from typing import Optional
import typer
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt

from .utils import (
    print_success,
    print_error,
    print_warning,
    print_info,
    confirm
)

console = Console()

# Template for a simple pipeline
PIPELINE_TEMPLATE = '''"""
{project_name} - An ops0 ML pipeline
Generated by ops0 init
"""

import ops0
import pandas as pd
import numpy as np


@ops0.step
def load_data(file_path: str = "data.csv"):
    """Load data from CSV file."""
    # This is automatically cached by ops0
    data = pd.read_csv(file_path)
    print(f"Loaded {len(data)} rows")
    return data


@ops0.step
def preprocess(data: pd.DataFrame):
    """Preprocess the data."""
    # Remove missing values
    cleaned = data.dropna()

    # Normalize numerical columns
    numeric_cols = cleaned.select_dtypes(include=[np.number]).columns
    cleaned[numeric_cols] = (cleaned[numeric_cols] - cleaned[numeric_cols].mean()) / cleaned[numeric_cols].std()

    print(f"Preprocessed data shape: {cleaned.shape}")
    return cleaned


@ops0.step
def train_model(data: pd.DataFrame, model_name: str = "{project_name}-model"):
    """Train a model on the preprocessed data."""
    # Example: train your model here
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestClassifier

    # This is just an example - replace with your actual training code
    X = data.drop('target', axis=1, errors='ignore')
    y = data.get('target', pd.Series([0] * len(data)))

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

    model = RandomForestClassifier()
    model.fit(X_train, y_train)

    # Save model using ops0's built-in model management
    ops0.save_model(model, model_name)

    # Return metrics
    accuracy = model.score(X_test, y_test)
    return {{"accuracy": accuracy, "model": model_name}}


@ops0.step
def evaluate(metrics: dict):
    """Evaluate model performance and send alerts if needed."""
    accuracy = metrics.get("accuracy", 0)

    if accuracy < 0.8:
        # ops0 handles notifications automatically
        ops0.notify.email(
            subject="Model Performance Alert",
            body=f"Model accuracy is below threshold: {{accuracy:.2%}}"
        )

    # Log metrics for monitoring
    ops0.log_metrics(metrics)

    return {{
        "status": "completed",
        "accuracy": accuracy,
        "alert_sent": accuracy < 0.8
    }}


# Optional: Define pipeline explicitly
# If not defined, ops0 will infer it from function dependencies
pipeline = ops0.Pipeline(
    name="{project_name}",
    steps=[load_data, preprocess, train_model, evaluate],
    schedule="0 0 * * *"  # Daily at midnight
)


if __name__ == "__main__":
    # Test locally
    ops0.run(pipeline, mode="local")
'''

GITIGNORE_TEMPLATE = """# ops0 directories
.ops0/
ops0-debug/

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.venv/
ENV/
.env

# Data files
*.csv
*.parquet
*.pkl
*.joblib
data/
models/
outputs/

# IDE
.vscode/
.idea/
*.swp
*.swo
.DS_Store

# Jupyter
.ipynb_checkpoints/
*.ipynb

# Logs
*.log
logs/
"""

README_TEMPLATE = """# {project_name}

An ops0 ML pipeline project.

## Quick Start

1. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

2. Test locally:
   ```bash
   ops0 run --local
   ```

3. Deploy to production:
   ```bash
   ops0 deploy
   ```

## Project Structure

- `pipeline.py` - Main pipeline definition
- `requirements.txt` - Python dependencies
- `.ops0/` - ops0 configuration and state

## Pipeline Steps

1. **load_data** - Load data from CSV
2. **preprocess** - Clean and normalize data
3. **train_model** - Train ML model
4. **evaluate** - Evaluate performance and send alerts

## Monitoring

View pipeline status:
```bash
ops0 status
```

View logs:
```bash
ops0 logs
```

## Learn More

- [ops0 Documentation](https://docs.ops0.xyz)
- [ops0 Examples](https://github.com/ops0-mlops/examples)
"""

REQUIREMENTS_TEMPLATE = """# Core ops0
ops0>=0.1.0

# Data processing
pandas>=1.5.0
numpy>=1.23.0

# Machine learning
scikit-learn>=1.0.0

# Optional: Add your specific dependencies below
# tensorflow>=2.10.0
# pytorch>=2.0.0
# xgboost>=1.7.0
"""


def init(
        name: Optional[str] = typer.Argument(None, help="Project name"),
        path: Optional[Path] = typer.Option(None, "--path", "-p", help="Project directory"),
        force: bool = typer.Option(False, "--force", "-f", help="Overwrite existing files"),
        template: str = typer.Option("default", "--template", "-t", help="Project template to use"),
        no_git: bool = typer.Option(False, "--no-git", help="Skip git initialization"),
):
    """
    Initialize a new ops0 project.

    Creates the project structure and example pipeline code.
    """
    console.print("\n[bold blue]ðŸš€ Initializing ops0 project...[/bold blue]\n")

    # Get project name
    if not name:
        name = Prompt.ask("Project name", default="my-ops0-project")

    # Validate project name
    if not name.replace("-", "").replace("_", "").isalnum():
        print_error("Project name must contain only letters, numbers, hyphens, and underscores")
        return

    # Get project path
    if not path:
        path = Path.cwd() / name
    else:
        path = path.absolute()

    # Check if directory exists
    if path.exists() and not force:
        if not confirm(f"Directory {path} already exists. Continue?"):
            print_info("Initialization cancelled")
            return

    # Create project structure
    try:
        create_project_structure(path, name, template, force)

        # Initialize git repository
        if not no_git and not (path / ".git").exists():
            init_git_repo(path)

        # Show success message
        console.print(Panel(
            f"[green]âœ… Project '{name}' created successfully![/green]\n\n"
            f"[bold]Next steps:[/bold]\n"
            f"1. cd {path.relative_to(Path.cwd())}\n"
            f"2. pip install -r requirements.txt\n"
            f"3. ops0 run --local\n"
            f"4. ops0 deploy\n\n"
            f"[dim]Learn more: https://docs.ops0.xyz/quickstart[/dim]",
            title="[bold green]Success[/bold green]",
            border_style="green"
        ))

    except Exception as e:
        print_error(f"Failed to create project: {e}")
        raise typer.Exit(1)


def create_project_structure(path: Path, name: str, template: str, force: bool):
    """Create the project directory structure."""
    # Create directories
    directories = [
        path,
        path / ".ops0",
        path / ".ops0" / "storage",
        path / ".ops0" / "logs",
        path / ".ops0" / "registry",
        path / "data",
        path / "models",
        path / "notebooks"
    ]

    for directory in directories:
        directory.mkdir(parents=True, exist_ok=True)

    # Create files
    files = {
        "pipeline.py": PIPELINE_TEMPLATE.format(project_name=name),
        ".gitignore": GITIGNORE_TEMPLATE,
        "README.md": README_TEMPLATE.format(project_name=name),
        "requirements.txt": REQUIREMENTS_TEMPLATE,
        ".ops0/config.yaml": f"""# ops0 configuration
project_name: {name}
version: 0.1.0

# Environment settings
environment: development

# Runtime configuration
runtime:
  type: local  # local, docker, or kubernetes

# Storage configuration  
storage:
  type: local
  path: .ops0/storage

# Monitoring
monitoring:
  enabled: true
  port: 9090
""",
        ".env.example": """# Environment variables for ops0

# API Keys (optional)
# OPENAI_API_KEY=your-key-here
# AWS_ACCESS_KEY_ID=your-key-here
# AWS_SECRET_ACCESS_KEY=your-key-here

# ops0 Settings
OPS0_ENV=development
OPS0_LOG_LEVEL=INFO
"""
    }

    for filename, content in files.items():
        file_path = path / filename

        if file_path.exists() and not force:
            print_warning(f"Skipping existing file: {filename}")
            continue

        file_path.write_text(content)
        print_success(f"Created {filename}")

    # Create example data file
    example_data = path / "data" / "example.csv"
    if not example_data.exists():
        example_data.write_text("id,feature1,feature2,target\n1,0.5,1.2,0\n2,0.7,1.5,1\n3,0.3,0.9,0\n")
        print_success("Created example data file")


def init_git_repo(path: Path):
    """Initialize a git repository."""
    import subprocess

    try:
        # Initialize git
        subprocess.run(["git", "init"], cwd=path, check=True, capture_output=True)

        # Add all files
        subprocess.run(["git", "add", "."], cwd=path, check=True, capture_output=True)

        # Initial commit
        subprocess.run(
            ["git", "commit", "-m", "Initial commit - ops0 project"],
            cwd=path,
            check=True,
            capture_output=True
        )

        print_success("Initialized git repository")

    except subprocess.CalledProcessError:
        print_warning("Could not initialize git repository")
    except FileNotFoundError:
        print_warning("Git not found - skipping repository initialization")